
import java.util.ArrayList;
import javax.swing.ImageIcon;

/**
 * HEADER
 * File Name:   Matching Card Game
 * Programmer:  Jannis Saini
 * Course Code: ICS4U1-02
 * Date:        May 18, 2022
 * Description: This program uses arrays to simulate a matching game 
 * A grid of cards will be displayed and the user is to select 2 cards at a time
   looking for matching cards 
 * The goal of this game is to see how quickly the user can find all the matches
 */

/**
 * Additional Features.
 * 1. Tells the user how many pairs they have found out of 10
 * 2. Tells the user how many tries they used to just find one match
 * 3. Tells the user how many tries they used overall during the game
 * 4. Shuffles cards when user plays again (just had to clear the arrays) 
 * 5. Stops the user from clicking cards after they click two
 * 6. Stops the user from clicking cards when all cards are found. User must click restart game to continue
 * 7. Congratulates the user when they win 
 */

public class JSMatchingGame extends javax.swing.JFrame {

    // fields declaration
    ArrayList <String> cards = new ArrayList ();
    ArrayList <String> set = new ArrayList ();
    
    //importing the images into the code 
    ImageIcon back = new ImageIcon(getClass().getResource("/images/cardback.jpg"));
    ImageIcon done = new ImageIcon(getClass().getResource("/images/done.jpg"));
    ImageIcon luffy = new ImageIcon(getClass().getResource("/images/Luffy.jpg"));
    ImageIcon zoro = new ImageIcon(getClass().getResource("/images/Zoro.jpg"));
    ImageIcon sanji = new ImageIcon(getClass().getResource("/images/Sanji.jpg"));
    ImageIcon nami = new ImageIcon(getClass().getResource("/images/Nami.jpg"));
    ImageIcon usopp = new ImageIcon(getClass().getResource("/images/Usopp.jpg"));
    ImageIcon chopper = new ImageIcon(getClass().getResource("/images/Chopper.jpg"));
    ImageIcon robin = new ImageIcon(getClass().getResource("/images/Robin.jpg"));
    ImageIcon franky = new ImageIcon(getClass().getResource("/images/Franky.jpg"));
    ImageIcon brook = new ImageIcon(getClass().getResource("/images/Brook.jpg"));
    ImageIcon jinbe = new ImageIcon(getClass().getResource("/images/Jinbe.jpg"));
    
    //naming the variables used through out the program
    int count, c1, c2;
    int pairsMade = 0;
    int totalMoves = 0;
    int triesPerMatch = 0;
    int[] change = new int [20];
    
    //game starts off as false until user presses play  
    boolean gameStarted = false;
    
    /**
     * Creates new form JSMatchingGame
     */
    public JSMatchingGame() {
        initComponents();
        
        //prevents the user from editing the textfeilds
        totalPairsOutput.setEditable(false);
        triesOutput.setEditable(false);
        totalMovesOutput.setEditable(false);
        
        //sets the textField in the beggining by calling upon the method 
        restart();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        card1 = new javax.swing.JButton();
        card2 = new javax.swing.JButton();
        card3 = new javax.swing.JButton();
        card4 = new javax.swing.JButton();
        card5 = new javax.swing.JButton();
        subTitleLabel = new javax.swing.JLabel();
        playButton = new javax.swing.JButton();
        guessAgainButton = new javax.swing.JButton();
        triesLabel = new javax.swing.JLabel();
        totalMovesLabel = new javax.swing.JLabel();
        totalPairsLabel = new javax.swing.JLabel();
        totalPairsOutput = new javax.swing.JTextField();
        triesOutput = new javax.swing.JTextField();
        totalMovesOutput = new javax.swing.JTextField();
        card6 = new javax.swing.JButton();
        card7 = new javax.swing.JButton();
        card8 = new javax.swing.JButton();
        card9 = new javax.swing.JButton();
        card10 = new javax.swing.JButton();
        card12 = new javax.swing.JButton();
        card11 = new javax.swing.JButton();
        card15 = new javax.swing.JButton();
        card14 = new javax.swing.JButton();
        card13 = new javax.swing.JButton();
        card17 = new javax.swing.JButton();
        card16 = new javax.swing.JButton();
        card20 = new javax.swing.JButton();
        card19 = new javax.swing.JButton();
        card18 = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        restartGameButton = new javax.swing.JButton();
        luffyIconLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backgroundPanel.setBackground(new java.awt.Color(204, 255, 255));

        titleLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 0, 0));
        titleLabel.setText("One Piece Matching Game");
        titleLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0), 2));

        card1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card1ActionPerformed(evt);
            }
        });

        card2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card2ActionPerformed(evt);
            }
        });

        card3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card3ActionPerformed(evt);
            }
        });

        card4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card4ActionPerformed(evt);
            }
        });

        card5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card5ActionPerformed(evt);
            }
        });

        subTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        subTitleLabel.setForeground(new java.awt.Color(255, 102, 102));
        subTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subTitleLabel.setText("Click the Play button to start. Make sure to click Guess Again after each guess");
        subTitleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        playButton.setBackground(new java.awt.Color(204, 255, 204));
        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        guessAgainButton.setBackground(new java.awt.Color(255, 204, 255));
        guessAgainButton.setText("Guess Again");
        guessAgainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guessAgainButtonActionPerformed(evt);
            }
        });

        triesLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        triesLabel.setForeground(new java.awt.Color(0, 0, 255));
        triesLabel.setText("Tries per Match:");

        totalMovesLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        totalMovesLabel.setForeground(new java.awt.Color(0, 0, 255));
        totalMovesLabel.setText("Total # of Moves:");

        totalPairsLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        totalPairsLabel.setForeground(new java.awt.Color(0, 0, 255));
        totalPairsLabel.setText("Total Pairs:");

        card6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card6ActionPerformed(evt);
            }
        });

        card7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card7ActionPerformed(evt);
            }
        });

        card8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card8ActionPerformed(evt);
            }
        });

        card9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card9ActionPerformed(evt);
            }
        });

        card10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card10ActionPerformed(evt);
            }
        });

        card12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card12ActionPerformed(evt);
            }
        });

        card11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card11ActionPerformed(evt);
            }
        });

        card15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card15ActionPerformed(evt);
            }
        });

        card14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card14ActionPerformed(evt);
            }
        });

        card13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card13ActionPerformed(evt);
            }
        });

        card17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card17ActionPerformed(evt);
            }
        });

        card16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card16ActionPerformed(evt);
            }
        });

        card20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card20ActionPerformed(evt);
            }
        });

        card19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card19ActionPerformed(evt);
            }
        });

        card18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cardBack.jpg"))); // NOI18N
        card18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card18ActionPerformed(evt);
            }
        });

        exitButton.setBackground(new java.awt.Color(255, 204, 204));
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        restartGameButton.setBackground(new java.awt.Color(204, 204, 255));
        restartGameButton.setText("Restart Game");
        restartGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartGameButtonActionPerformed(evt);
            }
        });

        luffyIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/LuffyIcon.png"))); // NOI18N
        luffyIconLabel.setText("jLabel1");

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(titleLabel))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                                        .addComponent(card16, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(card17, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(card18, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(card19, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(card20, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                                        .addComponent(card11, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(card12, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(card13, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(card14, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(card15, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(backgroundPanelLayout.createSequentialGroup()
                                            .addComponent(card6, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(card7, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(card8, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(card9, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(card10, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(backgroundPanelLayout.createSequentialGroup()
                                            .addComponent(card1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(card3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(card4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(card5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(luffyIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                                        .addGap(60, 60, 60)
                                        .addComponent(restartGameButton))
                                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                                        .addGap(72, 72, 72)
                                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(subTitleLabel)))))
                .addGap(0, 26, Short.MAX_VALUE))
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(guessAgainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(totalPairsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalPairsOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(triesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(triesOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(totalMovesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalMovesOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subTitleLabel)
                .addGap(18, 18, 18)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playButton)
                    .addComponent(guessAgainButton)
                    .addComponent(totalPairsLabel)
                    .addComponent(totalPairsOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(triesLabel)
                    .addComponent(totalMovesLabel)
                    .addComponent(triesOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalMovesOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(luffyIconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(restartGameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(card1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card5, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(card6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card7, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card8, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card9, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card10, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(card11, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card12, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card13, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card14, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card15, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(card16, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card17, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card18, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card19, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card20, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exits the GUI
     * @param evt 
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * Restarts the Game
     * @param evt 
     */
    private void restartGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartGameButtonActionPerformed
        //resetting the cards to face down
        card1.setIcon(back);
        card2.setIcon(back);
        card3.setIcon(back);
        card4.setIcon(back);
        card5.setIcon(back);
        card6.setIcon(back);
        card7.setIcon(back);
        card8.setIcon(back);
        card9.setIcon(back);
        card10.setIcon(back);
        card11.setIcon(back);
        card12.setIcon(back);
        card13.setIcon(back);
        card14.setIcon(back);
        card15.setIcon(back);
        card16.setIcon(back);
        card17.setIcon(back);
        card18.setIcon(back);
        card19.setIcon(back);
        card20.setIcon(back);
        
        //calls the method to restart the game
        restart();
    }//GEN-LAST:event_restartGameButtonActionPerformed

    /**
     * Restarts the game.
     */
    private void restart(){
        //prevents the user from pressing anything before clicking play again
        gameStarted = false;
        //resets the sub title instructions
        subTitleLabel.setText("Click the Play button to start. Make sure to click Guess Again after each guess");
        
        //clears the array so the cards can be shuffled again when the user presses play 
        cards.clear();
        set.clear();
        
        pairsMade = 0;//restarts the Total Pairs TextField
        totalPairsOutput.setText("0/10");
        
        totalMoves = 0;//retsarts the Total # of Moves TextField
        totalMovesOutput.setText("0");
        
        triesPerMatch = 0;//restarts the Tries per Match TextField
        triesOutput.setText("0");
    }
    
    /**
     * Plays the game
     * @param evt 
     * shuffles the cards and only adds two of each card
     */
    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        gameStarted = true;//makes the game true so user can click the cards
        
        //Set change Array
        for(int z = 0; z <= 19; z++){
            change[z] = 1;
        }
        
        //Assign cards at random//
        
        String temp;
        for(int x = 0; x <= 9; x++){
            //adds each number twice in the array to allow a pair of only 2 cards being used 
            for(int y = 1; y <= 2; y++){
                temp = Integer.toString(x);
                set.add(temp);//adds to the array set
            }
        }
        
        for(int x = 0; x <= 19; x++){
            double index = Math.floor(Math.random()*(20 - x));//gets a random number between 1-20
            int index1 = (int) index;//saves the random number as an integer
            
            cards.add(set.get(index1));//adds the number from the array set to the array cards
            set.remove(set.get(index1));//removed the number from the array set to prevent repetition
        }
    }//GEN-LAST:event_playButtonActionPerformed

    /**
     * Guess Again
     * @param evt 
     * checks for a match and turns the card to either congratulations or back to the card back
     * adds to the totalMoves/triesPerMove/pairsMade
     */
    private void guessAgainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guessAgainButtonActionPerformed
        gameStarted = true;//turns the game to true again so the user can click on two more cards
        
        count = 0;//resets the count to 0
        
        if(c1 == c2) {//if the user finds the same cards c1 and c2 is the same
            
            triesPerMatch = 0;//resets the tries per match TextField
            triesOutput.setText("0");
            
            //finds the cards the user matched and turns the cards over to congratulations
            for (int y = 1; y <= 2; y++) {
                if (change[0] == 0){
                    card1.setIcon(done);
                    change[0] = 2;//resets the change back to 2
                }
                else if(change[1] == 0){
                    card2.setIcon(done);
                    change[1] = 2;
                }
                else if(change[2] == 0){
                    card3.setIcon(done);
                    change[2] = 2;
                }
                else if(change[3] == 0){
                    card4.setIcon(done);
                    change[3] = 2;
                }
                else if(change[4] == 0){
                    card5.setIcon(done);
                    change[4] = 2;
                }
                else if(change[5] == 0){
                    card6.setIcon(done);
                    change[5] = 2;
                }
                else if(change[6] == 0){
                    card7.setIcon(done);
                    change[6] = 2;
                }
                else if(change[7] == 0){
                    card8.setIcon(done);
                    change[7] = 2;
                }
                else if(change[8] == 0){
                    card9.setIcon(done);
                    change[8] = 2;
                }
                else if(change[9] == 0){
                    card10.setIcon(done);
                    change[9] = 2;
                }
                else if(change[10] == 0){
                    card11.setIcon(done);
                    change[10] = 2;
                }
                else if(change[11] == 0){
                    card12.setIcon(done);
                    change[11] = 2;
                }
                else if(change[12] == 0){
                    card13.setIcon(done);
                    change[12] = 2;
                }
                else if(change[13] == 0){
                    card14.setIcon(done);
                    change[13] = 2;
                }
                else if(change[14] == 0){
                    card15.setIcon(done);
                    change[14] = 2;
                }
                else if(change[15] == 0){
                    card16.setIcon(done);
                    change[15] = 2;
                }
                else if(change[16] == 0){
                    card17.setIcon(done);
                    change[16] = 2;
                }
                else if(change[17] == 0){
                    card18.setIcon(done);
                    change[17] = 2;
                }
                else if(change[18] == 0){
                    card19.setIcon(done);
                    change[18] = 2;
                }
                else if(change[19] == 0){
                    card20.setIcon(done);
                    change[19] = 2;
                }
            }
            pairsMade++;//adds to the pairs made
            //outputs how many pairs the user has found out of 10
            totalPairsOutput.setText(pairsMade + "/10");

            //if the user has found all 10 pairs the user can not play again until they restart the game
            if (pairsMade == 10) {
                gameStarted = false;
                //sets the subTitle to congratulations
                subTitleLabel.setText("Congratulations! You win! Restart the game to play again");
            }
        }
        //if the user does not find the same cards
        else{
            //finds the cards the user didn't match and turns the cards back over 
            for(int y = 1; y <= 2; y++){
                if(change[0] == 0){
                    card1.setIcon(back);
                    change[0] = 1;//resets the change back to 1
                }
                else if(change[1] == 0){
                    card2.setIcon(back);
                    change[1] = 1;
                }
                else if(change[2] == 0){
                    card3.setIcon(back);
                    change[2] = 1;
                }
                else if(change[3] == 0){
                    card4.setIcon(back);
                    change[3] = 1;
                }
                else if(change[4] == 0){
                    card5.setIcon(back);
                    change[4] = 1;
                }
                else if(change[5] == 0){
                    card6.setIcon(back);
                    change[5] = 1;
                }
                else if(change[6] == 0){
                    card7.setIcon(back);
                    change[6] = 1;
                }
                else if(change[7] == 0){
                    card8.setIcon(back);
                    change[7] = 1;
                }
                else if(change[8] == 0){
                    card9.setIcon(back);
                    change[8] = 1;
                }
                else if(change[9] == 0){
                    card10.setIcon(back);
                    change[9] = 1;
                }
                else if(change[10] == 0){
                    card11.setIcon(back);
                    change[10] = 1;
                }
                else if(change[11] == 0){
                    card12.setIcon(back);
                    change[11] = 1;
                }
                else if(change[12] == 0){
                    card13.setIcon(back);
                    change[12] = 1;
                }
                else if(change[13] == 0){
                    card14.setIcon(back);
                    change[13] = 1;
                }
                else if(change[14] == 0){
                    card15.setIcon(back);
                    change[14] = 1;
                }
                else if(change[15] == 0){
                    card16.setIcon(back);
                    change[15] = 1;
                }
                else if(change[16] == 0){
                    card17.setIcon(back);
                    change[16] = 1;
                }
                else if(change[17] == 0){
                    card18.setIcon(back);
                    change[17] = 1;
                }
                else if(change[18] == 0){
                    card19.setIcon(back);
                    change[18] = 1;
                }
                else if(change[19] == 0){
                    card20.setIcon(back);
                    change[19] = 1;
                }
            } 
            triesPerMatch++;//adds to the tries per match
            //outputs the tries per match
            triesOutput.setText(String.valueOf(triesPerMatch));
        }
        totalMoves++;//adds to the total moves
        //outputs the total moves 
        totalMovesOutput.setText(String.valueOf(totalMoves)); 
    }//GEN-LAST:event_guessAgainButtonActionPerformed

    /**
     * All Cards
     * @param evt 
     * 
     * //Note//
     * All the steps for the cards are the same
     * Instructions are only written in Card1
     */
    private void card1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card1ActionPerformed
        //if the game is not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        //gets the number for the card
        String temp = cards.get(0);
        
        //finds the picture that corresponds with the number for the card
        if(temp.equals("0")){
            card1.setIcon(luffy);
        } else if (temp.equals("1")){
            card1.setIcon(zoro);
        } else if (temp.equals("2")){
            card1.setIcon(sanji);
        } else if (temp.equals("3")){
            card1.setIcon(nami);
        } else if (temp.equals("4")){
            card1.setIcon(usopp);
        } else if (temp.equals("5")){
            card1.setIcon(chopper);
        } else if (temp.equals("6")){
            card1.setIcon(robin);
        } else if (temp.equals("7")){
            card1.setIcon(franky);
        } else if (temp.equals("8")){
            card1.setIcon(brook);
        } else if (temp.equals("9")){
            card1.setIcon(jinbe);
        }
        
        count++;//adds to count
        
        //if first clicked card
        if(count == 1){
            c1 = Integer.parseInt(temp);//adds card number to c1
            change[0] = 0;//makes change 0
        }
        //if second card clicked
        else if(count == 2){
            c2 = Integer.parseInt(temp);//adds card number to c2
            change[0] = 0;//makes change 0
            gameStarted = false;//makes the game false so the user can not click more then two cards
            //user must click guess again to continue clicking two more cards
        }
    }//GEN-LAST:event_card1ActionPerformed

    private void card2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card2ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(1);
        
        if(temp.equals("0")){
            card2.setIcon(luffy);
        } else if (temp.equals("1")){
            card2.setIcon(zoro);
        } else if (temp.equals("2")){
            card2.setIcon(sanji);
        } else if (temp.equals("3")){
            card2.setIcon(nami);
        } else if (temp.equals("4")){
            card2.setIcon(usopp);
        } else if (temp.equals("5")){
            card2.setIcon(chopper);
        } else if (temp.equals("6")){
            card2.setIcon(robin);
        } else if (temp.equals("7")){
            card2.setIcon(franky);
        } else if (temp.equals("8")){
            card2.setIcon(brook);
        } else if (temp.equals("9")){
            card2.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[1] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[1] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card2ActionPerformed

    private void card3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card3ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(2);
        
        if(temp.equals("0")){
            card3.setIcon(luffy);
        } else if (temp.equals("1")){
            card3.setIcon(zoro);
        } else if (temp.equals("2")){
            card3.setIcon(sanji);
        } else if (temp.equals("3")){
            card3.setIcon(nami);
        } else if (temp.equals("4")){
            card3.setIcon(usopp);
        } else if (temp.equals("5")){
            card3.setIcon(chopper);
        } else if (temp.equals("6")){
            card3.setIcon(robin);
        } else if (temp.equals("7")){
            card3.setIcon(franky);
        } else if (temp.equals("8")){
            card3.setIcon(brook);
        } else if (temp.equals("9")){
            card3.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[2] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[2] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card3ActionPerformed

    private void card4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card4ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(3);
        
        if(temp.equals("0")){
            card4.setIcon(luffy);
        } else if (temp.equals("1")){
            card4.setIcon(zoro);
        } else if (temp.equals("2")){
            card4.setIcon(sanji);
        } else if (temp.equals("3")){
            card4.setIcon(nami);
        } else if (temp.equals("4")){
            card4.setIcon(usopp);
        } else if (temp.equals("5")){
            card4.setIcon(chopper);
        } else if (temp.equals("6")){
            card4.setIcon(robin);
        } else if (temp.equals("7")){
            card4.setIcon(franky);
        } else if (temp.equals("8")){
            card4.setIcon(brook);
        } else if (temp.equals("9")){
            card4.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[3] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[3] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card4ActionPerformed

    private void card5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card5ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(4);
        
        if(temp.equals("0")){
            card5.setIcon(luffy);
        } else if (temp.equals("1")){
            card5.setIcon(zoro);
        } else if (temp.equals("2")){
            card5.setIcon(sanji);
        } else if (temp.equals("3")){
            card5.setIcon(nami);
        } else if (temp.equals("4")){
            card5.setIcon(usopp);
        } else if (temp.equals("5")){
            card5.setIcon(chopper);
        } else if (temp.equals("6")){
            card5.setIcon(robin);
        } else if (temp.equals("7")){
            card5.setIcon(franky);
        } else if (temp.equals("8")){
            card5.setIcon(brook);
        } else if (temp.equals("9")){
            card5.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[4] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[4] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card5ActionPerformed

    private void card6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card6ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(5);
        
        if(temp.equals("0")){
            card6.setIcon(luffy);
        } else if (temp.equals("1")){
            card6.setIcon(zoro);
        } else if (temp.equals("2")){
            card6.setIcon(sanji);
        } else if (temp.equals("3")){
            card6.setIcon(nami);
        } else if (temp.equals("4")){
            card6.setIcon(usopp);
        } else if (temp.equals("5")){
            card6.setIcon(chopper);
        } else if (temp.equals("6")){
            card6.setIcon(robin);
        } else if (temp.equals("7")){
            card6.setIcon(franky);
        } else if (temp.equals("8")){
            card6.setIcon(brook);
        } else if (temp.equals("9")){
            card6.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[5] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[5] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card6ActionPerformed

    private void card7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card7ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(6);
        
        if(temp.equals("0")){
            card7.setIcon(luffy);
        } else if (temp.equals("1")){
            card7.setIcon(zoro);
        } else if (temp.equals("2")){
            card7.setIcon(sanji);
        } else if (temp.equals("3")){
            card7.setIcon(nami);
        } else if (temp.equals("4")){
            card7.setIcon(usopp);
        } else if (temp.equals("5")){
            card7.setIcon(chopper);
        } else if (temp.equals("6")){
            card7.setIcon(robin);
        } else if (temp.equals("7")){
            card7.setIcon(franky);
        } else if (temp.equals("8")){
            card7.setIcon(brook);
        } else if (temp.equals("9")){
            card7.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[6] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[6] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card7ActionPerformed

    private void card8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card8ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(7);
        
        if(temp.equals("0")){
            card8.setIcon(luffy);
        } else if (temp.equals("1")){
            card8.setIcon(zoro);
        } else if (temp.equals("2")){
            card8.setIcon(sanji);
        } else if (temp.equals("3")){
            card8.setIcon(nami);
        } else if (temp.equals("4")){
            card8.setIcon(usopp);
        } else if (temp.equals("5")){
            card8.setIcon(chopper);
        } else if (temp.equals("6")){
            card8.setIcon(robin);
        } else if (temp.equals("7")){
            card8.setIcon(franky);
        } else if (temp.equals("8")){
            card8.setIcon(brook);
        } else if (temp.equals("9")){
            card8.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[7] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[7] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card8ActionPerformed

    private void card9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card9ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(8);
        
        if(temp.equals("0")){
            card9.setIcon(luffy);
        } else if (temp.equals("1")){
            card9.setIcon(zoro);
        } else if (temp.equals("2")){
            card9.setIcon(sanji);
        } else if (temp.equals("3")){
            card9.setIcon(nami);
        } else if (temp.equals("4")){
            card9.setIcon(usopp);
        } else if (temp.equals("5")){
            card9.setIcon(chopper);
        } else if (temp.equals("6")){
            card9.setIcon(robin);
        } else if (temp.equals("7")){
            card9.setIcon(franky);
        } else if (temp.equals("8")){
            card9.setIcon(brook);
        } else if (temp.equals("9")){
            card9.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[8] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[8] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card9ActionPerformed

    private void card10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card10ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(9);
        
        if(temp.equals("0")){
            card10.setIcon(luffy);
        } else if (temp.equals("1")){
            card10.setIcon(zoro);
        } else if (temp.equals("2")){
            card10.setIcon(sanji);
        } else if (temp.equals("3")){
            card10.setIcon(nami);
        } else if (temp.equals("4")){
            card10.setIcon(usopp);
        } else if (temp.equals("5")){
            card10.setIcon(chopper);
        } else if (temp.equals("6")){
            card10.setIcon(robin);
        } else if (temp.equals("7")){
            card10.setIcon(franky);
        } else if (temp.equals("8")){
            card10.setIcon(brook);
        } else if (temp.equals("9")){
            card10.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[9] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[9] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card10ActionPerformed

    private void card11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card11ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(10);
        
        if(temp.equals("0")){
            card11.setIcon(luffy);
        } else if (temp.equals("1")){
            card11.setIcon(zoro);
        } else if (temp.equals("2")){
            card11.setIcon(sanji);
        } else if (temp.equals("3")){
            card11.setIcon(nami);
        } else if (temp.equals("4")){
            card11.setIcon(usopp);
        } else if (temp.equals("5")){
            card11.setIcon(chopper);
        } else if (temp.equals("6")){
            card11.setIcon(robin);
        } else if (temp.equals("7")){
            card11.setIcon(franky);
        } else if (temp.equals("8")){
            card11.setIcon(brook);
        } else if (temp.equals("9")){
            card11.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[10] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[10] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card11ActionPerformed

    private void card12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card12ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(11);
        
        if(temp.equals("0")){
            card12.setIcon(luffy);
        } else if (temp.equals("1")){
            card12.setIcon(zoro);
        } else if (temp.equals("2")){
            card12.setIcon(sanji);
        } else if (temp.equals("3")){
            card12.setIcon(nami);
        } else if (temp.equals("4")){
            card12.setIcon(usopp);
        } else if (temp.equals("5")){
            card12.setIcon(chopper);
        } else if (temp.equals("6")){
            card12.setIcon(robin);
        } else if (temp.equals("7")){
            card12.setIcon(franky);
        } else if (temp.equals("8")){
            card12.setIcon(brook);
        } else if (temp.equals("9")){
            card12.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[11] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[11] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card12ActionPerformed

    private void card13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card13ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(12);
        
        if(temp.equals("0")){
            card13.setIcon(luffy);
        } else if (temp.equals("1")){
            card13.setIcon(zoro);
        } else if (temp.equals("2")){
            card13.setIcon(sanji);
        } else if (temp.equals("3")){
            card13.setIcon(nami);
        } else if (temp.equals("4")){
            card13.setIcon(usopp);
        } else if (temp.equals("5")){
            card13.setIcon(chopper);
        } else if (temp.equals("6")){
            card13.setIcon(robin);
        } else if (temp.equals("7")){
            card13.setIcon(franky);
        } else if (temp.equals("8")){
            card13.setIcon(brook);
        } else if (temp.equals("9")){
            card13.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[12] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[12] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card13ActionPerformed

    private void card14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card14ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(13);
        
        if(temp.equals("0")){
            card14.setIcon(luffy);
        } else if (temp.equals("1")){
            card14.setIcon(zoro);
        } else if (temp.equals("2")){
            card14.setIcon(sanji);
        } else if (temp.equals("3")){
            card14.setIcon(nami);
        } else if (temp.equals("4")){
            card14.setIcon(usopp);
        } else if (temp.equals("5")){
            card14.setIcon(chopper);
        } else if (temp.equals("6")){
            card14.setIcon(robin);
        } else if (temp.equals("7")){
            card14.setIcon(franky);
        } else if (temp.equals("8")){
            card14.setIcon(brook);
        } else if (temp.equals("9")){
            card14.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[13] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[13] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card14ActionPerformed

    private void card15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card15ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(14);
        
        if(temp.equals("0")){
            card15.setIcon(luffy);
        } else if (temp.equals("1")){
            card15.setIcon(zoro);
        } else if (temp.equals("2")){
            card15.setIcon(sanji);
        } else if (temp.equals("3")){
            card15.setIcon(nami);
        } else if (temp.equals("4")){
            card15.setIcon(usopp);
        } else if (temp.equals("5")){
            card15.setIcon(chopper);
        } else if (temp.equals("6")){
            card15.setIcon(robin);
        } else if (temp.equals("7")){
            card15.setIcon(franky);
        } else if (temp.equals("8")){
            card15.setIcon(brook);
        } else if (temp.equals("9")){
            card15.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[14] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[14] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card15ActionPerformed

    private void card16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card16ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(15);
        
        if(temp.equals("0")){
            card16.setIcon(luffy);
        } else if (temp.equals("1")){
            card16.setIcon(zoro);
        } else if (temp.equals("2")){
            card16.setIcon(sanji);
        } else if (temp.equals("3")){
            card16.setIcon(nami);
        } else if (temp.equals("4")){
            card16.setIcon(usopp);
        } else if (temp.equals("5")){
            card16.setIcon(chopper);
        } else if (temp.equals("6")){
            card16.setIcon(robin);
        } else if (temp.equals("7")){
            card16.setIcon(franky);
        } else if (temp.equals("8")){
            card16.setIcon(brook);
        } else if (temp.equals("9")){
            card16.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[15] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[15] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card16ActionPerformed

    private void card17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card17ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(16);
        
        if(temp.equals("0")){
            card17.setIcon(luffy);
        } else if (temp.equals("1")){
            card17.setIcon(zoro);
        } else if (temp.equals("2")){
            card17.setIcon(sanji);
        } else if (temp.equals("3")){
            card17.setIcon(nami);
        } else if (temp.equals("4")){
            card17.setIcon(usopp);
        } else if (temp.equals("5")){
            card17.setIcon(chopper);
        } else if (temp.equals("6")){
            card17.setIcon(robin);
        } else if (temp.equals("7")){
            card17.setIcon(franky);
        } else if (temp.equals("8")){
            card17.setIcon(brook);
        } else if (temp.equals("9")){
            card17.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[16] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[16] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card17ActionPerformed

    private void card18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card18ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(17);
        
        if(temp.equals("0")){
            card18.setIcon(luffy);
        } else if (temp.equals("1")){
            card18.setIcon(zoro);
        } else if (temp.equals("2")){
            card18.setIcon(sanji);
        } else if (temp.equals("3")){
            card18.setIcon(nami);
        } else if (temp.equals("4")){
            card18.setIcon(usopp);
        } else if (temp.equals("5")){
            card18.setIcon(chopper);
        } else if (temp.equals("6")){
            card18.setIcon(robin);
        } else if (temp.equals("7")){
            card18.setIcon(franky);
        } else if (temp.equals("8")){
            card18.setIcon(brook);
        } else if (temp.equals("9")){
            card18.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[17] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[17] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card18ActionPerformed

    private void card19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card19ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(18);
        
        if(temp.equals("0")){
            card19.setIcon(luffy);
        } else if (temp.equals("1")){
            card19.setIcon(zoro);
        } else if (temp.equals("2")){
            card19.setIcon(sanji);
        } else if (temp.equals("3")){
            card19.setIcon(nami);
        } else if (temp.equals("4")){
            card19.setIcon(usopp);
        } else if (temp.equals("5")){
            card19.setIcon(chopper);
        } else if (temp.equals("6")){
            card19.setIcon(robin);
        } else if (temp.equals("7")){
            card19.setIcon(franky);
        } else if (temp.equals("8")){
            card19.setIcon(brook);
        } else if (temp.equals("9")){
            card19.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[18] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[18] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card19ActionPerformed

    private void card20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card20ActionPerformed
        //if game not started, reject Card clicks
        if(!gameStarted){
            return;
        }
        
        String temp = cards.get(19);
        
        if(temp.equals("0")){
            card20.setIcon(luffy);
        } else if (temp.equals("1")){
            card20.setIcon(zoro);
        } else if (temp.equals("2")){
            card20.setIcon(sanji);
        } else if (temp.equals("3")){
            card20.setIcon(nami);
        } else if (temp.equals("4")){
            card20.setIcon(usopp);
        } else if (temp.equals("5")){
            card20.setIcon(chopper);
        } else if (temp.equals("6")){
            card20.setIcon(robin);
        } else if (temp.equals("7")){
            card20.setIcon(franky);
        } else if (temp.equals("8")){
            card20.setIcon(brook);
        } else if (temp.equals("9")){
            card20.setIcon(jinbe);
        }
        
        count++;
        if(count == 1){
            c1 = Integer.parseInt(temp);
            change[19] = 0;
        }
        else if(count == 2){
            c2 = Integer.parseInt(temp);
            change[19] = 0;
            gameStarted = false;
        }
    }//GEN-LAST:event_card20ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JSMatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JSMatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JSMatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JSMatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JSMatchingGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton card1;
    private javax.swing.JButton card10;
    private javax.swing.JButton card11;
    private javax.swing.JButton card12;
    private javax.swing.JButton card13;
    private javax.swing.JButton card14;
    private javax.swing.JButton card15;
    private javax.swing.JButton card16;
    private javax.swing.JButton card17;
    private javax.swing.JButton card18;
    private javax.swing.JButton card19;
    private javax.swing.JButton card2;
    private javax.swing.JButton card20;
    private javax.swing.JButton card3;
    private javax.swing.JButton card4;
    private javax.swing.JButton card5;
    private javax.swing.JButton card6;
    private javax.swing.JButton card7;
    private javax.swing.JButton card8;
    private javax.swing.JButton card9;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton guessAgainButton;
    private javax.swing.JLabel luffyIconLabel;
    private javax.swing.JButton playButton;
    private javax.swing.JButton restartGameButton;
    private javax.swing.JLabel subTitleLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel totalMovesLabel;
    private javax.swing.JTextField totalMovesOutput;
    private javax.swing.JLabel totalPairsLabel;
    private javax.swing.JTextField totalPairsOutput;
    private javax.swing.JLabel triesLabel;
    private javax.swing.JTextField triesOutput;
    // End of variables declaration//GEN-END:variables
}
